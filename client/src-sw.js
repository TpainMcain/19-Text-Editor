// Importing necessary workbox modules
const { warmStrategyCache } = require('workbox-recipes');
const { CacheFirst, StaleWhileRevalidate } = require('workbox-strategies');
const { registerRoute } = require('workbox-routing');
const { CacheableResponsePlugin } = require('workbox-cacheable-response');
const { ExpirationPlugin } = require('workbox-expiration');
const { precacheAndRoute } = require('workbox-precaching/precacheAndRoute');

// The precacheAndRoute() method precaches all URLs in the WB_MANIFEST array. 
// self.__WB_MANIFEST is auto-generated by workbox during the build and includes all URLs to be precached.
precacheAndRoute(self.__WB_MANIFEST);

// Creating CacheFirst strategy for page cache
const pageCache = new CacheFirst({
  cacheName: 'page-cache', // name of the cache
  plugins: [
    // CacheableResponsePlugin allows us to only cache responses with certain HTTP status codes.
    new CacheableResponsePlugin({
      statuses: [0, 200], // 0 and 200 are status codes for successful responses
    }),
    // ExpirationPlugin allows us to limit the lifetime of cache entries.
    new ExpirationPlugin({
      maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
    }),
  ],
});

// Warm up the page cache
warmStrategyCache({
  urls: ['/index.html', '/'], // URLs to be cached in advance
  strategy: pageCache, // strategy to be used
});

// Register navigation route and use CacheFirst strategy
registerRoute(
  ({ request }) => request.mode === 'navigate', pageCache
);

// Asset caching
// This route will cache any request for style, script or worker resources
registerRoute(
  // Callback to match requests. We only want to cache JS, CSS and worker resources.
  ({ request }) => ['style', 'script', 'worker'].includes(request.destination),
  // Use StaleWhileRevalidate strategy. It will try to fetch an updated response from the network,
  // but will return a cached response immediately and then update the cache in the background.
  new StaleWhileRevalidate({
    cacheName: 'asset-cache', // Name of the cache storage.
    plugins: [
      // Only cache responses with 0 or 200 status.
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      // Set a limit for cache entries and their lifetime.
      new ExpirationPlugin({
        maxEntries: 60, // Maximum number of entries in the cache
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      })
    ],
  })
);
